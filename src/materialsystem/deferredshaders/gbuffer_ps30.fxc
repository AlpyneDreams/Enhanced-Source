
// STATIC:		"ALPHATEST"			"0..1"
// STATIC:		"BUMPMAP"			"0..2"
// STATIC:		"NOCULL"			"0..1"
// STATIC:		"PHONGMAP"			"0..1"
// STATIC:		"BUMPMAP2"			"0..1"
// STATIC:		"BLENDMODULATE"		"0..1"
// STATIC:		"MULTIBLEND"		"0..1"
// STATIC:		"LIGHTMAP"			"0..2"
// STATIC:		"STATICLIGHTMODE"	"0..2"

// SKIP:		$STATICLIGHTMODE && !$MODEL

// SKIP:		!$BUMPMAP2 && !$MULTIBLEND && $BLENDMODULATE
// SKIP:		!$BUMPMAP && $BUMPMAP2
// SKIP:		$MODEL && $BUMPMAP2

// SKIP:		$MODEL && $MULTIBLEND
// SKIP:		$BUMPMAP2 && $MULTIBLEND

// SKIP:		$DECAL && $MULTIBLEND
// SKIP:		$DECAL && $BLENDMODULATE
// SKIP:		$DECAL && $BUMPMAP
// SKIP:		$DECAL && $NOCULL
// SKIP:		$DECAL && $PHONGMAP

// SKIP:		$LIGHTMAP && $MODEL
// SKIP:		($LIGHTMAP == 2) && !$BUMPMAP

#include "common_ps_fxc.h"
#include "common_deferred_fxc.h"


#if ALPHATEST
sampler sAlbedo							: register( s0 );
#endif

#if ALPHATEST
const float g_flAlphaRef				: register( c0 );
#endif


#if BUMPMAP
sampler sBumpmap						: register( s1 );
#endif

#if PHONGMAP
sampler sPhongmap						: register( s2 );
#else
const float2 g_flPhong_exp				: register( c2 );
#endif

const float2 g_flHalflambert_Litface	: register( c1 );

#if BUMPMAP2
sampler sBumpmap2							: register( s3 );
#endif

#if BLENDMODULATE
sampler sBlendmodulate						: register( s4 );
#endif

#if MULTIBLEND
sampler sBumpmap2							: register( s3 );
sampler sBumpmap3							: register( s5 );
sampler sBumpmap4							: register( s6 );
#if BLENDMODULATE
sampler sBlendmodulate2						: register( s7 );
sampler sBlendmodulate3						: register( s8 );
#endif
#endif

#if LIGHTMAP
sampler sLightmap							: register( s15 );
#endif

struct PS_INPUT
{
#if BLENDMODULATE
	float4 vTexCoord				: TEXCOORD0;
#else
	float2 vTexCoord				: TEXCOORD0;
#endif
	float4 worldNormal_Depth		: TEXCOORD1;

#if BUMPMAP
	float3 worldTangentS			: TEXCOORD2;
	float3 worldTangentT			: TEXCOORD3;
#endif

#if NOCULL
	float vDir						: VFACE;
#endif

#if BUMPMAP2 || LIGHTMAP
	float4 vColor_0					: COLOR0;
#endif
#if LIGHTMAP == 2
	float4 lightmapTexCoord2And3		: TEXCOORD6;
#endif

#if STATICLIGHTMODE
	float3 vStaticLight				: TEXCOORD6;
#if STATICLIGHTMODE == 2
	float3 vStaticLight1			: TEXCOORD7;
	float3 vStaticLight2			: TEXCOORD8;
#endif
#endif

#if MULTIBLEND
#if BLENDMODULATE
	float4 vTexCoordBlendmod23			: TEXCOORD4;
#endif
	float3 vAlphaBlend					: TEXCOORD5;
	float3 vColorBlend1					: COLOR1;
	//float4 vColorBlend2					: COLOR1;
	//float4 vColorBlend3					: TEXCOORD6;
	//float3 vColorBlend4					: TEXCOORD7;
#endif
};


struct PS_OUTPUT
{
	float4 vColor_0				:	COLOR0;

#if ( DECAL == 0 )
	float4 vColor_1				:	COLOR1;

#	if ( DEFCFG_LIGHTCTRL_PACKING == 0 )
	float4 vColorLightCtrl				:	COLOR2;
	float4 vColorLightAccum				:	COLOR3;
#	else
	float4 vColorLightAccum				:	COLOR2;
#	endif

#endif
};

#if LIGHTMAP
float3 DiffuseBump( sampler lightmapSampler,
                   float2  lightmapTexCoord1,
                   float2  lightmapTexCoord2,
                   float2  lightmapTexCoord3,
                   float3   normal )
{
	float3 lightmapColor1 = tex2D( lightmapSampler, lightmapTexCoord1 ) * LIGHT_MAP_SCALE;
	float3 lightmapColor2 = tex2D( lightmapSampler, lightmapTexCoord2 ) * LIGHT_MAP_SCALE;
	float3 lightmapColor3 = tex2D( lightmapSampler, lightmapTexCoord3 ) * LIGHT_MAP_SCALE;

	float3 diffuseLighting;
	diffuseLighting = saturate( dot( normal, bumpBasis[0] ) ) * lightmapColor1 +
					  saturate( dot( normal, bumpBasis[1] ) ) * lightmapColor2 +
					  saturate( dot( normal, bumpBasis[2] ) ) * lightmapColor3;

	return diffuseLighting; //float4( diffuseLighting, LuminanceScaled( diffuseLighting ) );
}

#endif


PS_OUTPUT main( const PS_INPUT In )
{
	PS_OUTPUT Out;

#if ALPHATEST
	float4 flAlbedoSample = tex2D( sAlbedo, In.vTexCoord.xy );
#	if ALPHATEST
	clip( flAlbedoSample.a - g_flAlphaRef );
#	endif
#endif

#if DECAL
	Out.vColor_0 = flAlbedoSample;
#else

#if BUMPMAP
	float3 bumpNormal = tex2D( sBumpmap, In.vTexCoord.xy ).rgb;

#if BUMPMAP2
	float3 bumpNormal2 = tex2D( sBumpmap2, In.vTexCoord.xy ).rgb;
	float flBlendfactor = In.vColor_0.w;
#if BLENDMODULATE
	flBlendfactor = GetModulatedBlend( flBlendfactor, tex2D( sBlendmodulate, In.vTexCoord.zw ).rg );
#endif
	bumpNormal = lerp( bumpNormal, bumpNormal2, flBlendfactor );
#endif

#if MULTIBLEND
	float remaining = 1;
	float4 flBlendFactors;
#if BLENDMODULATE
	flBlendFactors.x = GetMultiBlendModulated( tex2D( sBlendmodulate, In.vTexCoord.zw ).rg, In.vColorBlend1.r, In.vAlphaBlend.x, remaining );
	flBlendFactors.y = GetMultiBlendModulated( tex2D( sBlendmodulate2, In.vTexCoordBlendmod23.xy ).rg, In.vColorBlend1.g, In.vAlphaBlend.y, remaining );
	flBlendFactors.z = GetMultiBlendModulated( tex2D( sBlendmodulate3, In.vTexCoordBlendmod23.zw ).rg, In.vColorBlend1.b, In.vAlphaBlend.z, remaining );
#else
	flBlendFactors.x = GetMultiBlend( In.vColorBlend1.r, remaining );
	flBlendFactors.y = GetMultiBlend( In.vColorBlend1.g, remaining );
	flBlendFactors.z = GetMultiBlend( In.vColorBlend1.b, remaining );
#endif
	flBlendFactors.w = remaining;
	bumpNormal = bumpNormal * flBlendFactors.x
		+ tex2D( sBumpmap2, In.vTexCoord.xy ) * flBlendFactors.y
		+ tex2D( sBumpmap3, In.vTexCoord.xy ) * flBlendFactors.z
		+ tex2D( sBumpmap4, In.vTexCoord.xy ) * flBlendFactors.w;
#endif

	float3 tangentNormal;
	float3 bumpNormalScaled = bumpNormal * 2.0f - 1.0f;
#if BUMPMAP == 1
	tangentNormal = bumpNormalScaled;
#else
	tangentNormal = normalize( bumpBasis[0]*bumpNormal.x + bumpBasis[1]*bumpNormal.y + bumpBasis[2]*bumpNormal.z);
#endif
	float3 worldNormal = Vec3TangentToWorld( tangentNormal, In.worldNormal_Depth.xyz, In.worldTangentS, In.worldTangentT );
#else
	float3 worldNormal = In.worldNormal_Depth.xyz;
#endif

#if NOCULL
	worldNormal *= In.vDir;
#endif

	worldNormal = worldNormal * 0.5f + 0.5f;

#if ( TRANSLUCENT == 0 )
#	if PHONGMAP
	float phong_exp = tex2D( sPhongmap, In.vTexCoord.xy ).x * 63.0f;
#	else
#		if BUMPMAP2
	float phong_exp = lerp( g_flPhong_exp.x, g_flPhong_exp.y, flBlendfactor );
#		else
	float phong_exp = g_flPhong_exp.x;
#		endif
#	endif
#endif

#if DEFCFG_LIGHTCTRL_PACKING
	Out.vColor_0 = float4( worldNormal, PackLightingControls( phong_exp,
		g_flHalflambert_Litface.x, g_flHalflambert_Litface.y ) );
#else
	Out.vColor_0 = float4( worldNormal, 1 );
	Out.vColorLightCtrl = float4( phong_exp / 63.0f, g_flHalflambert_Litface.xy, 0 );
#endif

	Out.vColor_1 = float4( In.worldNormal_Depth.w, 0, 0, 1 );

#if LIGHTMAP == 2
	float3 flLightmapSamples = DiffuseBump( sLightmap, In.vColor_0.xy, In.lightmapTexCoord2And3.xy, In.lightmapTexCoord2And3.zw, bumpNormalScaled );
	Out.vColorLightAccum = float4( flLightmapSamples, 0 );
#elif LIGHTMAP == 1
	Out.vColorLightAccum = float4( tex2D( sLightmap, In.vColor_0.xy ).rgb * LIGHT_MAP_SCALE, 0 );
#else
	Out.vColorLightAccum = float4( 1, 0, 0, 0 );
#endif

#if STATICLIGHTMODE
	float3 dp;
	dp.x = saturate( dot( tangentSpaceNormal, upBumpBasis[0] ) );
	dp.y = saturate( dot( tangentSpaceNormal, upBumpBasis[1] ) );
	dp.z = saturate( dot( tangentSpaceNormal, upBumpBasis[2] ) );
	dp *= dp;

	float3 diffuseLight = dp.x * In.vStaticLight;
#if STATICLIGHTMODE == 2
	diffuseLight += dp.y * In.vStaticLight1;
	diffuseLight += dp.z * In.vStaticLight2;
#endif
	//Out.vColorLightAccum = float4( 1, 0, 0, 0 );
#endif


#endif // !DECAL

	return Out;
}